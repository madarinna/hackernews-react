{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants\";\nimport { debounce } from \"../utils/debounce\";\nexport const useInfiniteScroll = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n  const handleScroll = debounce(() => {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [loading]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  return {\n    count\n  };\n};\n\n_s(useInfiniteScroll, \"Ymt8nUZzgiVbBXKxAcyIxVGl/v8=\");","map":{"version":3,"sources":["/Users/Inna/Documents/GitHub/FE-2/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","STORY_INCREMENT","MAX_STORIES","debounce","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,cAA7C;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACE,eAAD,CAAlC;AAEA,QAAMQ,YAAY,GAAGN,QAAQ,CAAC,MAAM;AACnC,QACCO,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACCF,QAAQ,CAACC,eAAT,CAAyBE,YAD1B,IAEAV,OAHD,EAIE;AACD,aAAO,KAAP;AACA;;AAEDC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,GAV4B,EAU1B,GAV0B,CAA7B;AAYAN,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACK,OAAL,EAAc;;AAEd,QAAIE,KAAK,GAAGN,eAAR,IAA2BC,WAA/B,EAA4C;AAC3CM,MAAAA,QAAQ,CAACN,WAAD,CAAR;AACA,KAFD,MAEO;AACNM,MAAAA,QAAQ,CAACD,KAAK,GAAGN,eAAT,CAAR;AACA;;AAEDK,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,GAVQ,EAUN,CAACD,OAAD,CAVM,CAAT;AAYAL,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAb;AACA,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO;AAAEF,IAAAA;AAAF,GAAP;AACA,CAlCM;;GAAMH,iB","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants\";\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [count, setCount] = useState(STORY_INCREMENT);\n\n\tconst handleScroll = debounce(() => {\n\t\tif (\n\t\t\twindow.innerHeight + document.documentElement.scrollTop !==\n\t\t\t\tdocument.documentElement.offsetHeight ||\n\t\t\tloading\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tsetLoading(true);\n\t}, 500);\n\n\tuseEffect(() => {\n\t\tif (!loading) return;\n\n\t\tif (count + STORY_INCREMENT >= MAX_STORIES) {\n\t\t\tsetCount(MAX_STORIES);\n\t\t} else {\n\t\t\tsetCount(count + STORY_INCREMENT);\n\t\t}\n\n\t\tsetLoading(false);\n\t}, [loading]);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"scroll\", handleScroll);\n\t\treturn () => window.removeEventListener(\"scroll\", handleScroll);\n\t}, []);\n\n\treturn { count };\n};\n"]},"metadata":{},"sourceType":"module"}